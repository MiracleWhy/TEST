<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd  
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd  
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd  
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-3.0.xsd
        ">

	<!-- 启用CGliB -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- ====================================================================================== -->
	<!-- 启用基于注解（Annotation-based）的配置 -->
	<!-- ====================================================================================== -->
	<context:component-scan base-package="com.uton.carsokApi">
       <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
	<context:property-placeholder location="classpath:/properties/*.properties" />
	<bean id="propertyConfigurer" class="com.uton.carsokApi.service.core.task.SpringPropertiesUtil" lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath:/properties/taskextrafields.properties</value>
			</list>
		</property>
	</bean>
		<!-- 连接池配置. -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
		<property name="maxTotal" value="8" />
		<!-- 连接池中最大空闲的连接数. -->
		<property name="maxIdle" value="4" />
		<!-- 连接池中最少空闲的连接数. -->
		<property name="minIdle" value="1" />
		<!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait -->
		<property name="maxWaitMillis" value="5000" />
		<!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 -->
		<property name="numTestsPerEvictionRun" value="3" />
		<!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
		<!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值.-->
		<!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
		<!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
	</bean>
	
	<!-- Spring提供的Redis连接工厂 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
			destroy-method="destroy">
		<!-- 连接池配置. -->
		<property name="poolConfig" ref="jedisPoolConfig" />
		<!-- Redis服务主机. -->
		<property name="hostName" value="${redis.host}" />
		<!-- Redis服务端口号. -->
		<property name="port" value="${redis.port}" />
		<!-- Redis服务连接密码. -->
		<property name="password" value="${redis.password}" />
		<!-- 连超时设置. -->
		<property name="timeout" value="15000" />
		<!-- 是否使用连接池. -->
		<property name="usePool" value="true" />
	</bean>
	
	<!-- Spring提供的访问Redis类. -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>  
        <property name="keySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="hashKeySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />  
        </property>  
        <property name="hashValueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />  
        </property>  	
		
		</bean>


	<!-- ====================================================================================== -->
<!-- 	<context:property-placeholder location="classpath:/properties/*.properties" />
 -->	
	
	
<!-- 	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="2000" />
		<property name="maxIdle" value="200" />
		<property name="maxWaitMillis" value="3000" />
		<property name="testOnBorrow" value="false" />向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。设为true，一个挂都不能用
		<property name="testOnReturn" value="true" />向连接池“归还”链接时，是否检测“链接”对象的有效性。
	</bean> -->

	<!-- redis -->
<!-- 	<bean id="jedisPool" class="redis.clients.jedis.JedisSentinelPool"> -->
<!-- 		<constructor-arg index="0" value="mymaster" />  -->
<!-- 		<constructor-arg index="1"> -->
<!-- 			<set> -->
<!-- 				<value>192.168.102.203:26379</value> -->
<!-- 				<value>192.168.102.204:26379</value> -->
<!-- 			</set> -->
<!-- 		</constructor-arg> -->
<!-- 		<constructor-arg index="2" ref="jedisPoolConfig" /> -->
<!-- 	</bean> -->

<!-- 	<bean id="redisUtils" class="com.tianlian.redis.RedisUtils" -->
<!-- 		init-method="init" /> -->
		
	<bean id="tokenFilter" class="com.uton.carsokApi.filter.LoginFilter">
	 	<property name = "redisTemplate" ref="redisTemplate"></property>
	 </bean>
	<bean id="corsToken" class="com.uton.carsokApi.filter.CorsFilter">
	</bean>
	<bean id="subUserAuthInterceptor" class="com.uton.carsokApi.filter.SubUserAuthInterceptor" />
<!--	<aop:config>
		<aop:pointcut id="subUserAuth" expression="execution(public * com.uton.carsokApi.controller..*..*(..))" />
     	<aop:advisor pointcut-ref="subUserAuth" advice-ref="subUserAuthInterceptor"/>
    </aop:config>-->
	<!-- 定时任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
	<task:executor id="executor" pool-size="10"/>
	<task:scheduler id="scheduler" pool-size="10"/>
	<task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
	<!-- ====================================================================================== -->
	<!-- 全局异常错误处理 -->
	<!-- ======================================================================================= -->
	<!-- <bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		需要在log4j中也有对应的配置
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.SQLException">/error/error</prop>
			</props>
		</property>
	</bean> -->
	<import resource="classpath:/xmlConfig/spring-db.xml" />
	<import resource="classpath:/xmlConfig/KafkaProducer.xml" />
	<import resource="classpath:/xmlConfig/applicationContext-quartz.xml"/>
</beans>